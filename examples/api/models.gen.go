// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code HTTP status code
	Code int `json:"code"`

	// Error Error message
	Error string `json:"error"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5RUwW7jOAz9FYG7R9dOd7FA4dseBmgwl2Ka26SYMjJtqZUljUgHbQP/+0By0mknncPc",
	"EuqRfHx89AF0GGPw5IWhPQBrQyOWn59SCukLcQyeKQdiCpGSWCrPOnQl2hHrZKPY4KGF683mRrGgTKwK",
	"ogJ5jgQtWC80UIK5AsqVz3NLQzUSMw5vElmS9QPMcwWJvk82UQft12ORauFx94oOuwfSAnOGW9+H8zYb",
	"Y1lZVmJIffbhSf1/s1YcSdveasygeolbVqiY0t5qUmJQ1IgeB2K1oZSwD2lU5Pc2BT9m/RT6TrHHyCYI",
	"11u/9RtDiUohr3CP1uHOkbomNyptMInqQyrNCvr+/p4NObf1JiMSxaCw69RjZmNEIrdN80KWuR6smGlX",
	"29Dkxybjm1KR3yZPsUOhY4QJkzbLQ04q/bY+C23FZe0yEahgT4kXqS7rVb3KGwuRPEYLLfxbr+pLqCCi",
	"mOKDhrQpKg8kvxGbfBeD9aIylBbl8yqJRe1QPyoJJaadJS+1WkuWbGLqij5CLNYPKk4pBqasLBRKqWxr",
	"3WXvZBLZIItdC7N/VqvFqF7IF24YozvuuHngTPDk+HN/n8Y6d+EHTns/9O2kNTH3k1MnQlnE//6Qz9+J",
	"emjhr+bniTbH+2zeH+cHHNZeKHl06pbSnpIqCYU+T+OI6fko2ttlZCvgwPm6ip53FTxd9HZH6QInMS8X",
	"/VCIHSdvD+BxzFIMLuzQQVX+c0RdFHtmoRHK2TpcaL1mYDdan98mpvIpyA2+nZS1nf6lWIHNcxmUy0SZ",
	"5gGm5KCF0224oNGZwNJera5WMN/NPwIAAP//kBYfTOAEAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
